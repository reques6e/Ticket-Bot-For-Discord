import discord
import asyncio
import io
import chat_exporter
from discord.utils import get
from config import *
from database import *
from bot import *

class addMemberModal(discord.ui.Modal, title="Add a member"):
    answer = discord.ui.TextInput(label='Place Member ID here', style=discord.TextStyle.short, required=True, max_length=128)

    async def on_submit(self, interaction: discord.Interaction):
        tchannel = interaction.channel
        author = interaction.user
        guild = interaction.guild
        connection = TicketData.connect()
        cursor = TicketData.cursor(connection)
        ticketInfo = TicketData.find(cursor, tchannel.id)
        TicketData.close(connection)
        try:
            ltype = (ticketInfo[4])
        except IndexError:
            ltype = str("N/A")
        
        try:
            amember = discord.utils.get(guild.members, id=int(self.children[0].value))
        except Exception:
            amember = None
        if amember == None:
            embed = discord.Embed(description=f'''I couldn't find that member, are you sure that is a valid member id? This is what I got: {self.children[0].value}''', color=embedColor)
            embed.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            embed.set_author(name=f'{author}', icon_url=author.display_avatar)
            try:
                await interaction.response.send_message(embed=embed, ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message(f'''I couldn't find that member, are you sure that is a valid member id? This is what I got: {self.children[0].value}''', ephemeral=True)
        elif amember != None:
            try:
                for allowedRoles in list(channelPerms[f"{ltype}"]):
                    prole = discord.utils.get(guild.roles, id=allowedRoles)
                    if prole in amember.roles:
                        allowedAcess = True
                    else:
                        pass
            except TypeError:
                prole = get(guild.roles, id=channelPerms[f"{ltype}"])
                if prole in author.roles:
                    allowedAcess = True
                else:
                    pass
            if (allowedAcess == True):
                embed2 = discord.Embed(description=f'''I can't add that member!''', color=embedColor)
                embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
                embed2.set_author(name=f'{author}', icon_url=author.display_avatar)
                try:
                    await interaction.response.send_message(embed=embed2, ephemeral=True)
                except discord.HTTPException:
                    await interaction.response.send_message(f'''I can't add that member!`''', ephemeral=True)
            else:
                await tchannel.set_permissions(amember, send_messages=True, read_messages=True)
                embed2 = discord.Embed(description=f'''Member added. ‚úÖ''', color=embedColor)
                embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
                embed2.set_author(name=f'{author}', icon_url=author.display_avatar)
                try:
                    await interaction.response.send_message(embed=embed2, ephemeral=True)
                except discord.HTTPException:
                    await interaction.response.send_message(f'''Member added. ‚úÖ''', ephemeral=True)
                embed3 = discord.Embed(title="**__Member Added__**", description=f'''{amember.mention} has been added to the ticket by {author.mention}''', color=embedColor)
                embed3.set_thumbnail(url=f'{amember.avatar}')
                embed3.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
                try:
                    await tchannel.send(embed=embed3)
                except discord.HTTPException:
                    await tchannel.send(f'{amember.mention} **has been added to the ticket by {author.mention}**')

class removeMemberModal(discord.ui.Modal, title="Remove a member"):
    answer = discord.ui.TextInput(label='Place Member ID here', style=discord.TextStyle.short, required=True, max_length=128)

    async def on_submit(self, interaction: discord.Interaction):
        tchannel = interaction.channel
        author = interaction.user
        guild = interaction.guild
        connection = TicketData.connect()
        cursor = TicketData.cursor(connection)
        ticketInfo = TicketData.find(cursor, tchannel.id)
        TicketData.close(connection)
        try:
            ltype = (ticketInfo[4])
        except IndexError:
            ltype = str("N/A")
        
        try:
            amember = discord.utils.get(guild.members, id=int(self.children[0].value))
        except Exception:
            amember = None
        if amember == None:
            embed = discord.Embed(description=f'''I couldn't find that member, are you sure that is a valid member id? This is what I got: {self.children[0].value}''', color=embedColor)
            embed.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            embed.set_author(name=f'{author}', icon_url=author.display_avatar)
            try:
                await interaction.response.send_message(embed=embed, ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message(f'''I couldn't find that member, are you sure that is a valid member id? This is what I got: {self.children[0].value}''', ephemeral=True)
        elif amember != None:
            allowedAcess = False
            try:
                for allowedRoles in list(channelPerms[f"{ltype}"]):
                    prole = discord.utils.get(guild.roles, id=allowedRoles)
                    if prole in amember.roles:
                        allowedAcess = True
                    else:
                        pass
            except TypeError:
                prole = get(guild.roles, id=channelPerms[f"{ltype}"])
                if prole in author.roles:
                    allowedAcess = True
                else:
                    pass
            if (allowedAcess == True):
                embed2 = discord.Embed(description=f'''I can't remove that member!''', color=embedColor)
                embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
                embed2.set_author(name=f'{author}', icon_url=author.display_avatar)
                try:
                    await interaction.response.send_message(embed=embed2, ephemeral=True)
                except discord.HTTPException:
                    await interaction.response.send_message(f'''I can't remove that member!`''', ephemeral=True)
            else:
                await tchannel.set_permissions(amember, send_messages=False, read_messages=False)
                embed2 = discord.Embed(description=f'''Member removed. ‚úÖ''', color=embedColor)
                embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
                embed2.set_author(name=f'{author}', icon_url=author.display_avatar)
                try:
                    await interaction.response.send_message(embed=embed2, ephemeral=True)
                except discord.HTTPException:
                    await interaction.response.send_message(f'''Member removed. ‚úÖ''', ephemeral=True)

class renameChannelModal(discord.ui.Modal, title="Rename a Ticket Channel"):
    answer = discord.ui.TextInput(label='Place new name of ticket channel here', style=discord.TextStyle.short, required=True, max_length=32)
    async def on_submit(self, interaction: discord.Interaction):
        tchannel = interaction.channel
        author = interaction.user
        if f"{self.children[0].value}" == '':
            embed4 = discord.Embed(description=f'''You didn't provide a valid answer! Please try again. I got {self.children[0].value}''', color=embedColor)
            embed4.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed4.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                await interaction.response.send_message(embed=embed4, ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message(f'''You didn't provide a valid answer! Please try again. I got {self.children[0].value}''', ephemeral=True)
        else:
            embed2 = discord.Embed(description=f'Channel Renamed ‚úÖ', color=embedColor)
            embed2.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            await tchannel.edit(name=self.children[0].value)
            await interaction.response.send_message(embed=embed2, ephemeral=True)

    
class optionsMenu(discord.ui.View):
    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç", emoji="üö©", style=discord.ButtonStyle.gray)
    async def claim(self, interaction:discord.Interaction, button: discord.Button):
        tchannel = interaction.channel
        author = interaction.user
        guild = interaction.guild
        connection = TicketData.connect()
        cursor = TicketData.cursor(connection)
        ticketInfo = TicketData.find(cursor, tchannel.id)
        syslogc = get(guild.channels, id=ticketLogsChannelID)
        if (ticketInfo[2]) != "No":
            embed1 = discord.Embed(description=f'This ticket has already been claimed!', color=embedColor)
            embed1.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed1.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                await interaction.response.edit_message(embed=embed1, view=None)
            except discord.HTTPException:
                await interaction.response.edit_message(f"This ticket has already been claimed!", view=None)
        else:
            embed3 = discord.Embed(description=f'–¢–∏–∫–µ—Ç –ø—Ä–∏–Ω—è—Ç ‚úÖ', color=embedColor)
            embed3.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed3.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                await interaction.response.edit_message(embed=embed3, view=None)
            except discord.HTTPException:
                await interaction.response.edit_message(f"–¢–∏–∫–µ—Ç –ø—Ä–∏–Ω—è—Ç ‚úÖ", view=None)
            
            embed2 = discord.Embed(title="**__Ticket Claimed__**", description=f'''{author.mention} –ø—Ä–∏–Ω—è–ª —Ç–∏–∫–µ—Ç.''', color=embedColor)
            embed2.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                await tchannel.send(embed=embed2)
            except discord.HTTPException:
                await tchannel.send(f'''**__Ticket Claimed__**\n{author.mention} has claimed this ticket.''')
            TicketData.edit(connection, cursor, ticketInfo, author.id, ticketInfo[5])
            embed1 = discord.Embed(title='Ticket Claimed', description=f'{author.mention} has claimed ticket {tchannel.mention}', color=embedColor)
            embed1.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                message2 = await syslogc.send(embed=embed1)
            except discord.HTTPException:
                message2 = await syslogc.send(f"**{author.mention} has claimed ticket {tchannel.mention}**")
            else:
                pass
        TicketData.close(connection)

    @discord.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", emoji="üë•", style=discord.ButtonStyle.green)
    async def addmember(self, interaction:discord.Interaction, button: discord.ui.button):
        await interaction.response.send_modal(addMemberModal())
        author = interaction.user
        embed2 = discord.Embed(description=f'–ö–Ω–æ–ø–∫—É –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!', color=embedColor)
        embed2.set_author(name=f'{author}', icon_url=f'{author.display_avatar}')
        embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')  
        await interaction.edit_original_response(embed=embed2, view=None)

    @discord.ui.button(label="–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", emoji="üëã", style=discord.ButtonStyle.red)
    async def removemember(self, interaction:discord.Interaction, button: discord.ui.button):
        await interaction.response.send_modal(removeMemberModal())
        author = interaction.user
        embed2 = discord.Embed(description=f'–ö–Ω–æ–ø–∫—É –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!', color=embedColor)
        embed2.set_author(name=f'{author}', icon_url=f'{author.display_avatar}')
        embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')  
        await interaction.edit_original_response(embed=embed2, view=None)

    @discord.ui.button(label="–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç", emoji="üü¢", style=discord.ButtonStyle.blurple)
    async def activeticket(self, interaction:discord.Interaction, button: discord.ui.button):
        tchannel = interaction.channel
        author = interaction.user
        guild = interaction.guild
        syslogc = get(guild.channels, id=ticketLogsChannelID)
        connection = TicketData.connect()
        cursor = TicketData.cursor(connection)
        ticketInfo = TicketData.find(cursor, tchannel.id)
        categoryn = activeTicketsCategoryID
        if tchannel.category_id != categoryn:
            embed4 = discord.Embed(description=f'Setting Ticket to `Active` status...', color=embedColor)
            embed4.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed4.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                message3 = await interaction.response.edit_message(embed=embed4, view=None)
            except discord.HTTPException:
                message3 = await interaction.response.edit_message(f"Setting Ticket to `Active` status...", view=None)
            category = discord.utils.get(guild.categories, id=categoryn)
            await tchannel.edit(category=category)
            TicketData.edit(connection, cursor, ticketInfo, ticketInfo[2], "Active")
            embed1 = discord.Embed(title='__**Ticket Status Changed**__', description=f'This ticket has been set to `Active` ‚úÖ', color=embedColor)
            embed1.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed1.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                message3 = await tchannel.send(embed=embed1)
            except discord.HTTPException:
                message3 = await tchannel.send(f"**This ticket has been set to `Active` ‚úÖ**")
            embed2 = discord.Embed(title='Ticket set to Active', description=f'Ticket {tchannel.mention} has been set to `Active` by {author.mention}', color=embedColor)
            embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                await syslogc.send(embed=embed2)
            except discord.HTTPException:
                await syslogc.send(f"Ticket {tchannel.mention} has been set to `Active` by {author.mention}")   
        elif tchannel.category_id == categoryn:
            embed1 = discord.Embed(description=f'–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ `Active`!', color=embedColor)
            embed1.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed1.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                await interaction.response.edit_message(embed=embed1, view=None)
            except discord.HTTPException:
                await tchannel.send(f"–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞o `Active`!")
        TicketData.close(connection)

    @discord.ui.button(label="–û—Ç–ª–æ–∂–∏—Ç—å —Ç–∏–∫–µ—Ç", emoji="‚úã", style=discord.ButtonStyle.blurple)
    async def onholdticket(self, interaction:discord.Interaction, button: discord.ui.button):
        tchannel = interaction.channel
        author = interaction.user
        guild = interaction.guild
        syslogc = get(guild.channels, id=ticketLogsChannelID)
        connection = TicketData.connect()
        cursor = TicketData.cursor(connection)
        ticketInfo = TicketData.find(cursor, tchannel.id)
        categoryn = onHoldTicketsCategoryID
        if tchannel.category_id != categoryn:
            embed4 = discord.Embed(description=f'Setting Ticket to `Onhold` status...', color=embedColor)
            embed4.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed4.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                message3 = await interaction.response.edit_message(embed=embed4, view=None)
            except discord.HTTPException:
                message3 = await interaction.response.edit_message(f"Setting Ticket to `Onhold` status...", view=None)
            category = discord.utils.get(guild.categories, id=categoryn)
            await tchannel.edit(category=category)
            TicketData.edit(connection, cursor, ticketInfo, ticketInfo[2], "Onhold")
            embed1 = discord.Embed(title='__**Ticket Status Changed**__', description=f'–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ `Onhold` ‚úÖ', color=embedColor)
            embed1.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed1.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                message3 = await tchannel.send(embed=embed1)
            except discord.HTTPException:
                message3 = await tchannel.send(f"**–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ `Onhold` ‚úÖ**")
            embed2 = discord.Embed(title='Ticket set to Onhold', description=f'Ticket {tchannel.mention} has been set to `Onhold` by {author.mention}', color=embedColor)
            embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                await syslogc.send(embed=embed2)
            except discord.HTTPException:
                await syslogc.send(f"Ticket {tchannel.mention} has been set to `Onhold` by {author.mention}")   
        elif tchannel.category_id == categoryn:
            embed1 = discord.Embed(description=f'–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ `Onhold`!', color=embedColor)
            embed1.set_author(name=f'{author}', icon_url=author.display_avatar)
            embed1.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
            try:
                await interaction.response.edit_message(embed=embed1, view=None)
            except discord.HTTPException:
                await tchannel.send(f"–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ `Onhold`!")
        TicketData.close(connection)

    @discord.ui.button(label="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ç", emoji="‚úèÔ∏è", style=discord.ButtonStyle.gray)
    async def rename(self, interaction:discord.Interaction, button: discord.ui.button):
        await interaction.response.send_modal(renameChannelModal())
        author = interaction.user
        embed2 = discord.Embed(description=f'You can only select a button once!', color=embedColor)
        embed2.set_author(name=f'{author}', icon_url=f'{author.display_avatar}')
        embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')  
        await interaction.edit_original_response(embed=embed2, view=None)
        
    @discord.ui.button(label="–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ç", emoji="üóÑÔ∏è", style=discord.ButtonStyle.blurple)
    async def archive(self, interaction:discord.Interaction, button: discord.ui.button):
        author = interaction.user
        embed6 = discord.Embed(description="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç? –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—é —Ç–∏–∫–µ—Ç–∞ –≤ –∞—Ä—Ö–∏–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏ —Ç–∏–∫–µ—Ç-–±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º.", color=embedColor)
        embed6.set_author(name=f'{author}', icon_url=author.display_avatar)
        embed6.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            await interaction.response.edit_message(embed=embed6, view=ticketArchiveyesOrNoOption(timeout=None))
        except discord.HTTPException:
            await interaction.response.edit_message(content="–ó–¥–µ—Å—å –ø—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    @discord.ui.button(label="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç", emoji="üìù", style=discord.ButtonStyle.red)
    async def transcribe(self, interaction:discord.Interaction, button: discord.ui.button):
        author = interaction.user
        embed6 = discord.Embed(description="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç? –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é —Ç–∏–∫–µ—Ç–∞.", color=embedColor)
        embed6.set_author(name=f'{author}', icon_url=author.display_avatar)
        embed6.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            await interaction.response.edit_message(embed=embed6, view=yesOrNoOption(timeout=None))
        except discord.HTTPException:
            await interaction.response.edit_message("–ó–¥–µ—Å—å –ø—Ä–æ–∏–∑–æ—à–ª–æ —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


class yesOrNoOption(discord.ui.View):
    @discord.ui.button(label="–î–∞", style=discord.ButtonStyle.green)
    async def yes(self, interaction: discord.Interaction, button: discord.ui.Button):
        open('messages.txt', 'w').close()
        tchannel = interaction.channel

        messages = []
        async for message in tchannel.history(limit=None):
            messages.append(message)

        for message in messages:
            with open('messages.txt', 'a', encoding='utf-8') as file:
                file.write(f'{message.author.name}: {message.content}\n')


        lchannel = bot.get_channel(ticketTranscriptChannelID)
        author = interaction.user
        guild = interaction.guild
        connection = TicketData.connect()
        cursor = TicketData.cursor(connection)
        ticketInfo = TicketData.find(cursor, tchannel.id)
        syslogc = get(guild.channels, id=ticketLogsChannelID)
        embed4 = discord.Embed(description=f'–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞...', color=embedColor)
        embed4.set_author(name=f'{author}', icon_url=author.display_avatar)
        embed4.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            await interaction.response.edit_message(embed=embed4, view=None)
        except discord.HTTPException:
            await interaction.response.edit_message(f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞...", )
        connection = TicketData.connect()
        cursor = TicketData.cursor(connection)
        embed3 = discord.Embed(title=f'–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç', description=f'{author.mention} –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç, –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥', color=embedColor)
        embed3.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            await tchannel.send(embed=embed3)
        except discord.HTTPException:
            await tchannel.send(f"{author.mention} –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç, –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(2)

        embed2 = discord.Embed(title=f'–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Ç–∏–∫–µ—Ç–∞', description=f'{author.mention} –∑–∞–∫—Ä—ã–ª –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç, –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ —É–¥–∞–ª–µ–Ω.', color=embedColor)
        embed2.set_thumbnail(url="https://static-00.iconduck.com/assets.00/memo-emoji-1948x2048-bgnk0vsq.png")
        embed2.set_author(name=author, icon_url=author.display_avatar)
        embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        embed2.add_field(name='**__–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:__**', value=f'#{tchannel.name}', inline=True)
        embed2.add_field(name="**__–ê–≤—Ç–æ—Ä:__**", value=f"{author.mention}", inline=True)
        embed2.add_field(name="**__–¢–∏–ø:__**", value=f"{ticketInfo[4]}", inline=True)
        if dmTicketCopies == True:
            try:
                embed3 = discord.Embed(title="–ö–æ–ø–∏—è —Ç–∏–∫–µ—Ç–∞", description=f"–ü—Ä–∏–≤–µ—Ç {author.mention}!\n –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —É –Ω–∞—Å. –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∫–æ–ø–∏—è –≤–∞—à–µ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ª—é–±—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –≤–∞—à–µ–º —Ç–∏–∫–µ—Ç–µ, —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –∫–æ–ø–∏—é.\n \n ", color=embedColor)
                embed3.add_field(name="**__–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è:__**", value=f"–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞", inline=True)
                embed3.add_field(name="**__–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:__**", value=f"[–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞]()", inline=True)
                embed3.set_thumbnail(url="https://static-00.iconduck.com/assets.00/memo-emoji-1948x2048-bgnk0vsq.png")
                try:
                    await author.send(embed=embed3)
                except discord.HTTPException:
                    await author.send(f"–ü—Ä–∏–≤–µ—Ç {author.mention}!\n –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —É –Ω–∞—Å. –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∫–æ–ø–∏—è –≤–∞—à–µ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ª—é–±—ã–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –≤–∞—à–µ–º —Ç–∏–∫–µ—Ç–µ, —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –≤ –∫–æ–ø–∏—é.\n**__–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è:__–°–°–´–õ–ö–ê_–£–î–ê–õ–ï–ù–ê\n**__–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:__**[–°–°–´–õ–ö–ê –£–î–ê–õ–ï–ù–ê]()")
                embed2.add_field(name="**__–°—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏:__**", value="–ö–æ–ø–∏—è —Ç–∏–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç–∏–∫–µ—Ç–∞. ‚úÖ")
            except Exception:
                print("2")
                embed2.add_field(name="**__–°—Ç–∞—Ç—É—Å –∫–æ–ø–∏–∏:__**", value="–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ø–∏—é —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç–∏–∫–µ—Ç–∞. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ —É –Ω–µ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω—ã –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. ‚ùå")
        else:
            pass
        embed2.add_field(name="**__–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:__**", value=f"{ticketInfo[3]}", inline=False)
        embed2.add_field(name="**__–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è:__**", value=f"\n –°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞", inline=True)
        embed2.add_field(name="**__–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:__**", value=f"\n[–°–°–´–õ–ö–ê –£–î–ê–õ–ï–ù–ê]()", inline=True)
        try:
            message3 = await syslogc.send(embed=embed2, file=discord.File("messages.txt"))
        except discord.HTTPException:
            message3 = await syslogc.send(f"–ö–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–∞ **{tchannel.mention}** –±—ã–ª –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {author.mention}, –æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ —É–¥–∞–ª–µ–Ω.")

        await tchannel.delete()
        TicketData.delete(connection, cursor, tchannel.id)
        TicketData.close(connection)


    @discord.ui.button(label="–ù–µ—Ç", style=discord.ButtonStyle.red)
    async def no(self, interaction:discord.Interaction, button: discord.ui.button):
        author = interaction.user
        embed4 = discord.Embed(description="–û—Ç–º–µ–Ω–∞...", color=embedColor)
        embed4.set_author(name=f'{author}', icon_url=author.display_avatar)
        embed4.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            await interaction.response.edit_message(embed=embed4, view=None)
        except discord.HTTPException:
            await interaction.response.edit_message("–û—Ç–º–µ–Ω–∞...", view=None)
class ticketArchiveyesOrNoOption(discord.ui.View):
    @discord.ui.button(label="–î–∞", style=discord.ButtonStyle.green)
    async def yes(self, interaction: discord.Interaction, button: discord.ui.button):
        tchannel = interaction.channel
        author = interaction.user
        guild = interaction.guild
        syslogc = get(guild.channels, id=ticketLogsChannelID)
        connection = TicketData.connect()
        cursor = TicketData.cursor(connection)
        ticketInfo = TicketData.find(cursor, tchannel.id)
        categoryn = archivedTicketsCategoryID
        embed4 = discord.Embed(description=f'–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –Ω–∞ `–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω`...', color=embedColor)
        embed4.set_author(name=f'{author}', icon_url=author.display_avatar)
        embed4.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            message3 = await interaction.response.edit_message(embed=embed4, view=None)
        except discord.HTTPException:
            message3 = await interaction.response.edit_message(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –Ω–∞ `–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω`...", view=None)
        category = discord.utils.get(guild.categories, id=categoryn)
        await tchannel.edit(category=category)
        TicketData.edit(connection, cursor, ticketInfo, ticketInfo[2], "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
        embed1 = discord.Embed(title='__**–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞**__', description=f'–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å `–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω` ‚úÖ', color=embedColor)
        embed1.set_author(name=f'{author}', icon_url=author.display_avatar)
        embed1.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            message3 = await tchannel.send(embed=embed1)
        except discord.HTTPException:
            message3 = await tchannel.send(f"**–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å `–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω` ‚úÖ**")
        embed2 = discord.Embed(title='–¢–∏–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω"', description=f'–¢–∏–∫–µ—Ç {tchannel.mention} –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å `–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {author.mention}', color=embedColor)
        embed2.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            await syslogc.send(embed=embed2, file=discord.File("messages.txt"))
        except discord.HTTPException:
            await syslogc.send(f"–¢–∏–∫–µ—Ç {tchannel.mention} –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å `–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {author.mention}")
        TicketData.delete(connection, cursor, tchannel.id)
        TicketData.close(connection)

    @discord.ui.button(label="No", style=discord.ButtonStyle.red)
    async def no(self, interaction:discord.Interaction, button: discord.ui.button):
        author = interaction.user
        embed4 = discord.Embed(description="–û—Ç–º–µ–Ω–∞...", color=embedColor)
        embed4.set_author(name=f'{author}', icon_url=author.display_avatar)
        embed4.set_footer(text=f"{footerOfEmbeds} | {bot.user.id}", icon_url=f'{bot.user.display_avatar}')
        try:
            await interaction.response.edit_message(embed=embed4, view=None)
        except discord.HTTPException:
            await interaction.response.edit_message("–û—Ç–º–µ–Ω–∞...", view=None)